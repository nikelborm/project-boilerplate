{
  // See https://go.microsoft.com/fwlink/?LinkId=733558
  // for the documentation about the tasks.json format
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Up dev",
      "type": "shell",
      "dependsOn": [
        "Use docker builder"
      ],
      "command": ". env/dev; docker-compose -f ./docker-compose.dev.yaml up",
      "problemMatcher": [],
      "promptOnClose": true
    },
    {
      "label": "Up dev with rebuiling",
      "type": "shell",
      "dependsOn": [
        "Use docker builder"
      ],
      "command": ". env/dev; docker-compose -f ./docker-compose.dev.yaml up --build --remove-orphans --force-recreate",
      "problemMatcher": [],
      "promptOnClose": true
    },
    {
      "label": "Restart dev",
      "type": "shell",
      "dependsOn": [
        "Use docker builder"
      ],
      "command": ". env/dev; docker-compose -f ./docker-compose.dev.yaml restart",
      "problemMatcher": [],
      "promptOnClose": true
    },
    {
      "label": "Down dev",
      "type": "shell",
      "dependsOn": [
        "Use docker builder"
      ],
      "command": ". env/dev; docker-compose -f ./docker-compose.dev.yaml down",
      "problemMatcher": [],
      "promptOnClose": true
    },
    {
      "label": "Up prod",
      "type": "shell",
      "dependsOn": [
        "Use docker builder"
      ],
      "command": ". env/prod; docker-compose -f ./docker-compose.yaml up --build --remove-orphans --force-recreate -d; echo; echo $(docker inspect -f \"{{(index .NetworkSettings.Networks \\`${COMPOSE_PROJECT_NAME}_nginx-back-net\\`).IPAddress}}\" ${COMPOSE_PROJECT_NAME}_nginx-prod_1):80",
      "problemMatcher": [],
      "promptOnClose": true
    },
    {
      "label": "Down prod",
      "type": "shell",
      "dependsOn": [
        "Use docker builder"
      ],
      "command": ". env/prod; docker-compose -f ./docker-compose.yaml down",
      "problemMatcher": [],
      "promptOnClose": true
    },
    {
      "label": "Build multiplatform production",
      "type": "shell",
      "dependsOn": [
        "Use docker builder"
      ],
      "command": ". env/prod; docker buildx bake -f docker-compose.yml --set *.platform=linux/amd64,linux/arm64/v8 --pull --push",
      "problemMatcher": [],
      "promptOnClose": true
    },
    {
      "label": "ormgen dev database",
      "type": "shell",
      "dependsOn": [
        "Run dev"
      ],
      "command": ". env/dev; docker-compose -f ./docker-compose.dev.yaml exec backend-dev sh ./scripts/ormgen.sh",
      "problemMatcher": [],
      "promptOnClose": true
    },
    {
      "label": "migrate dev database",
      "type": "shell",
      "dependsOn": [
        "Run dev"
      ],
      "command": ". env/dev; docker-compose -f ./docker-compose.dev.yaml exec backend-dev sh ./scripts/migrate.sh",
      "problemMatcher": [],
      "promptOnClose": true
    },
    {
      "label": "drop dev database",
      "type": "shell",
      "dependsOn": [
        "Run dev"
      ],
      "command": ". env/dev; docker-compose -f ./docker-compose.dev.yaml exec backend-dev sh ./scripts/drop.sh",
      "problemMatcher": [],
      "promptOnClose": true
    },
    {
      "label": "recreate dev database",
      "type": "shell",
      "dependsOn": [
        "Run dev"
      ],
      "command": ". env/dev; docker-compose -f ./docker-compose.dev.yaml exec backend-dev sh ./scripts/recreate.sh",
      "problemMatcher": [],
      "promptOnClose": true
    },
    {
      "label": "Upgrade backend dependencies",
      "type": "shell",
      "command": "cd backend/; yarn upgrade-interactive --emoji true",
      "promptOnClose": false,
      "problemMatcher": []
    },
    {
      "label": "Upgrade frontend dependencies",
      "type": "shell",
      "command": "cd frontend/; yarn upgrade-interactive --emoji true",
      "promptOnClose": false,
      "problemMatcher": []
    },
    {
      "label": "Build docker node container",
      "type": "shell",
      "dependsOn": [
        "Use docker builder"
      ],
      "command": "cat ./node.Dockerfile; docker buildx build --push --platform=linux/amd64,linux/arm64/v8 -t nikelborm/node - < node.Dockerfile",
      "problemMatcher": [],
      "promptOnClose": true
    },
    {
      "label": "Create new docker builder",
      "type": "shell",
      "command": "docker run --privileged --rm tonistiigi/binfmt --install all; docker buildx create --name mybuilder --platform=linux/arm64,linux/amd64",
      "promptOnClose": false,
      "problemMatcher": []
    },
    {
      "label": "Use docker builder",
      "type": "shell",
      "command": "docker buildx use mybuilder",
      "promptOnClose": false,
      "problemMatcher": []
    },
    {
      "label": "clear docker",
      "type": "shell",
      "command": "docker stop $(docker ps -a -q);docker rm $(docker ps -a -q);docker volume prune;docker rmi $(docker images -a -q);",
      "promptOnClose": false,
      "problemMatcher": []
    }
  ]
}
