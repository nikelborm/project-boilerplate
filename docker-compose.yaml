version: '3.9'
services:
  nginx-prod:
    image: "${DOCKER_HUB_NICKNAME}/${DOCKER_REGISTRY_REPO_NAME}:${COMPOSE_PROJECT_NAME}-nginx-prod"
    restart: always
    depends_on:
      - backend-prod
    build:
      context: ./
      dockerfile: ./frontend/Dockerfile
      target: prod_nginx_with_front_static
      args:
        - REACT_APP_NAME=${COMPOSE_PROJECT_NAME}
        - INNER_NGINX_HTTP_PORT=${INNER_NGINX_HTTP_PORT}
        - INNER_NGINX_HTTPS_PORT=${INNER_NGINX_HTTPS_PORT}
    environment:
      - TZ=${TZ}
      - GENERATE_SOURCEMAP=${GENERATE_SOURCEMAP}
      - INNER_NGINX_HTTP_PORT=${INNER_NGINX_HTTP_PORT}
      - EXTERNAL_NGINX_HTTP_PORT=${EXTERNAL_NGINX_HTTP_PORT}
      - INNER_BACKEND_HTTP_SERVER_PORT=${INNER_BACKEND_HTTP_SERVER_PORT}
      - INNER_BACKEND_WS_SERVER_PORT=${INNER_BACKEND_WS_SERVER_PORT}
    ports:
      - ${EXTERNAL_NGINX_HTTP_PORT}:${INNER_NGINX_HTTP_PORT}/tcp
#      - ${EXTERNAL_NGINX_HTTPS_PORT}:${INNER_NGINX_HTTPS_PORT}/tcp
    networks:
      nginx-back-net-prod:
      nginx-pgadmin-net-prod:
        ipv4_address: 10.5.0.2

    # volumes:
    #   - ./data/certbot/conf:/etc/letsencrypt
    #   - ./data/certbot/www:/var/www/certbot

  # certbot:
  #   image: certbot/certbot
  #   command: certonly -n -d local.host --webroot --agree-tos --email kolya007.klass@gmail.com -w /var/www/certbot
  #   volumes:
  #     - ./data/certbot/conf:/etc/letsencrypt
  #     - ./data/certbot/www:/var/www/certbot
  #     - ./data/certbot/logs:/var/log/letsencrypt/

  backend-prod:
    image: "${DOCKER_HUB_NICKNAME}/${DOCKER_REGISTRY_REPO_NAME}:${COMPOSE_PROJECT_NAME}-backend-prod"
    restart: always
    depends_on:
      - postgres-prod
    build:
      context: ./
      dockerfile: ./backend/Dockerfile
      target: production
      args:
        - INNER_BACKEND_HTTP_SERVER_PORT=${INNER_BACKEND_HTTP_SERVER_PORT}
        - INNER_BACKEND_WS_SERVER_PORT=${INNER_BACKEND_WS_SERVER_PORT}
    environment:
      - TZ=${TZ}
      - NODE_ENV=production
      - SERVER_PORT=${INNER_BACKEND_HTTP_SERVER_PORT}
      - WEB_SOCKET_SERVER_PORT=${INNER_BACKEND_WS_SERVER_PORT}
      - WEB_SOCKET_SERVER_PATH=${WEB_SOCKET_SERVER_PATH}
      - BOOTSTRAP_MODE=${BOOTSTRAP_MODE}
      - MOCK_SCRIPT_NAME=${MOCK_SCRIPT_NAME}
      - AUTH_JWT_SECRET=${AUTH_JWT_SECRET}
      - USER_PASSWORD_HASH_SALT=${USER_PASSWORD_HASH_SALT}
      - INVITE_USERS_SIGN_KEY=${INVITE_USERS_SIGN_KEY}

      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_TYPEORM_LOGGING_MODE=${DATABASE_TYPEORM_LOGGING_MODE}

      - REDIS_MASTER_PORT=${REDIS_MASTER_INNER_PORT}
      - REDIS_MASTER_HOST=${REDIS_MASTER_HOST}
      - REDIS_MASTER_PASSWORD=${REDIS_MASTER_PASSWORD}
      - REDIS_REPLICA_PORT=${REDIS_REPLICA_INNER_PORT}
      - REDIS_REPLICA_HOST=${REDIS_REPLICA_HOST}
      - REDIS_REPLICA_PASSWORD=${REDIS_REPLICA_PASSWORD}
    volumes:
      - type: bind # for running migrate script inside existing backend container
        source: ./backend/src/infrastructure/database/
        target: /app/src/infrastructure/database/
    networks:
      nginx-back-net-prod:
      back-db-net-prod:
      back-redis-net-prod:

  redis-master-prod:
    image: 'bitnami/redis:latest'
    restart: always
    ports:
      - ${REDIS_MASTER_OUTER_PORT}:${REDIS_MASTER_INNER_PORT}
    environment:
      - REDIS_AOF_ENABLED=${REDIS_AOF_ENABLED}
      - REDIS_DISABLE_COMMANDS=${REDIS_DISABLED_COMMANDS}

      - REDIS_REPLICATION_MODE=master
      - REDIS_PORT_NUMBER=${REDIS_MASTER_INNER_PORT}
      - REDIS_PASSWORD=${REDIS_MASTER_PASSWORD}
    volumes:
      - type: volume
        source: redis-prod-persistent-data
        target: /bitnami/redis/data
    networks:
      redis-master-to-replica-net-prod:
      back-redis-net-prod:

  redis-replica-prod:
    image: 'bitnami/redis:latest'
    restart: always
    deploy:
      mode: replicated
      replicas: 3
    depends_on:
      - redis-master-prod
    environment:
      - REDIS_AOF_ENABLED=${REDIS_AOF_ENABLED}
      - REDIS_DISABLE_COMMANDS=${REDIS_DISABLED_COMMANDS}

      - REDIS_REPLICATION_MODE=slave
      - REDIS_PORT_NUMBER=${REDIS_REPLICA_INNER_PORT}
      - REDIS_PASSWORD=${REDIS_REPLICA_PASSWORD}

      - REDIS_MASTER_HOST=${REDIS_MASTER_HOST}
      - REDIS_MASTER_PORT_NUMBER=${REDIS_MASTER_INNER_PORT}
      - REDIS_MASTER_PASSWORD=${REDIS_MASTER_PASSWORD}
    networks:
      redis-master-to-replica-net-prod:
      back-redis-net-prod:

  postgres-prod:
    image: postgres
    restart: always
    command: "-c default_text_search_config=pg_catalog.russian"
    environment:
      - TZ=${TZ}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_USER=${DATABASE_USERNAME}
      - POSTGRES_DB=${DATABASE_NAME}
    volumes:
      - type: volume
        source: postgres-prod-data
        target: /var/lib/postgresql/data
    ports:
      - 5400:${DATABASE_PORT}
    networks:
      back-db-net-prod:
      pgadmin-db-net-prod:

  postgres-admin-prod:
    image: dpage/pgadmin4:latest
    restart: always
    depends_on:
      - postgres-prod
    profiles:
      - use_pg_admin_tool
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    networks:
      nginx-pgadmin-net-prod:
        ipv4_address: 10.5.0.3
      pgadmin-db-net-prod:

volumes:
  postgres-prod-data:
  redis-prod-persistent-data:

# when i will really want to use https and ssl
# article how to setup certbot and let's encrypt
# https://pentacent.medium.com/nginx-and-lets-encrypt-with-docker-in-less-than-5-minutes-b4b8a60d3a71
# online nginx configuration
# https://www.digitalocean.com/community/tools/nginx
# TODO: research posibility to use serial device and run smarthouse
# https://www.losant.com/blog/how-to-access-serial-devices-in-docker

networks:
  nginx-back-net-prod: {}
  nginx-pgadmin-net-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 10.5.0.0/16
          gateway: 10.5.0.1
  back-db-net-prod: {}
  back-redis-net-prod: {}
  pgadmin-db-net-prod: {}
  redis-master-to-replica-net-prod: {}

# eval "$(./scripts/shdotenv.sh --env ../env/dev.env -d node)"; yarn test:watch
# sudo docker run   --volume=/:/rootfs:ro   --volume=/var/run:/var/run:ro   --volume=/sys:/sys:ro   --volume=/var/lib/docker/:/var/lib/docker:ro   --volume=/dev/disk/:/dev/disk:ro   --publish=8080:8080   --detach=true   --name=cadvisor   --privileged   --device=/dev/kmsg   gcr.io/cadvisor/cadvisor:v0.46.0
