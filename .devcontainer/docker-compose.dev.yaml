version: '3.9'
services:
  nginx-dev:
    image: "${DOCKER_HUB_NICKNAME}/private:${COMPOSE_PROJECT_NAME}-nginx-dev"
    restart: unless-stopped
    depends_on:
      - backend-dev
      - frontend-dev
    build:
      context: ../
      dockerfile: ./frontend/Dockerfile
      target: dev_nginx
      args:
        - INNER_NGINX_HTTP_PORT=${INNER_NGINX_HTTP_PORT}
    environment:
      - TZ=${TZ}
      - GENERATE_SOURCEMAP=${GENERATE_SOURCEMAP}
      - EXTERNAL_NGINX_HTTP_PORT=${EXTERNAL_NGINX_HTTP_PORT}
      - INNER_NGINX_HTTP_PORT=${INNER_NGINX_HTTP_PORT}
      - INNER_DEV_FRONT_LIVE_RELOAD_SERVER_PORT=${INNER_DEV_FRONT_LIVE_RELOAD_SERVER_PORT}
      - INNER_BACKEND_HTTP_SERVER_PORT=${INNER_BACKEND_HTTP_SERVER_PORT}
      - INNER_BACKEND_WS_SERVER_PORT=${INNER_BACKEND_WS_SERVER_PORT}
    ports:
      - ${EXTERNAL_NGINX_HTTP_PORT}:${INNER_NGINX_HTTP_PORT}/tcp
    networks:
      nginx-front-net-dev:
      nginx-back-net-dev:
      nginx-pgadmin-net-dev:
        ipv4_address: 10.5.0.2

  frontend-dev:
    image: "${DOCKER_HUB_NICKNAME}/private:${COMPOSE_PROJECT_NAME}-frontend-dev"
    restart: unless-stopped
    build:
      context: ../
      dockerfile: ./frontend/Dockerfile
      target: dev_front
      args:
        - INNER_DEV_FRONT_LIVE_RELOAD_SERVER_PORT=${INNER_DEV_FRONT_LIVE_RELOAD_SERVER_PORT}
    environment:
      - TZ=${TZ}
      - GENERATE_SOURCEMAP=${GENERATE_SOURCEMAP}
      - DANGEROUSLY_DISABLE_HOST_CHECK=${DANGEROUSLY_DISABLE_HOST_CHECK}
      - REACT_APP_NAME=${COMPOSE_PROJECT_NAME}
      - TSC_WATCHFILE=UseFsEvents
    volumes:
      - type: bind
        source: ../frontend/src
        target: /app/src
        consistency: delegated
      - type: bind
        source: ../shared/src
        target: /app/src/types/shared
        consistency: delegated
    networks:
      nginx-front-net-dev:
      vscode-front-net-dev:

  backend-dev:
    image: "${DOCKER_HUB_NICKNAME}/private:${COMPOSE_PROJECT_NAME}-backend-dev"
    restart: unless-stopped
    depends_on:
      - postgres-dev
    build:
      context: ../
      dockerfile: ./backend/Dockerfile
      target: development
      args:
        - INNER_BACKEND_HTTP_SERVER_PORT=${INNER_BACKEND_HTTP_SERVER_PORT}
        - INNER_BACKEND_WS_SERVER_PORT=${INNER_BACKEND_WS_SERVER_PORT}
        - WEB_SOCKET_SERVER_PATH=${WEB_SOCKET_SERVER_PATH}
        - DEV_BACKEND_DEBUGGER_PORT=${DEV_BACKEND_DEBUGGER_PORT}
    environment:
      - TSC_WATCHFILE=UseFsEvents
      - TZ=${TZ}
      - NODE_ENV=development
      - SERVER_PORT=${INNER_BACKEND_HTTP_SERVER_PORT}
      - WEB_SOCKET_SERVER_PORT=${INNER_BACKEND_WS_SERVER_PORT}
      - WEB_SOCKET_SERVER_PATH=${WEB_SOCKET_SERVER_PATH}
      - BOOTSTRAP_MODE=${BOOTSTRAP_MODE}
      - MOCK_SCRIPT_NAME=${MOCK_SCRIPT_NAME}
      - AUTH_JWT_SECRET=${AUTH_JWT_SECRET}
      - USER_PASSWORD_HASH_SALT=${USER_PASSWORD_HASH_SALT}
      - INVITE_USERS_SIGN_KEY=${INVITE_USERS_SIGN_KEY}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_TYPEORM_LOGGING_MODE=${DATABASE_TYPEORM_LOGGING_MODE}
      - DEV_BACKEND_DEBUGGER_PORT=${DEV_BACKEND_DEBUGGER_PORT}
    ports:
      - ${DEV_BACKEND_DEBUGGER_PORT}:${DEV_BACKEND_DEBUGGER_PORT}
    volumes:
      - type: bind
        source: ../backend/src
        target: /app/src
        consistency: delegated
      - type: bind
        source: ../shared/src
        target: /app/src/types/shared
        consistency: delegated
    networks:
      nginx-back-net-dev:
      back-db-net-dev:
      vscode-back-net-dev:

  postgres-dev:
    image: postgres
    restart: unless-stopped
    command: "-c default_text_search_config=pg_catalog.russian"
    environment:
      - TZ=${TZ}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_USER=${DATABASE_USERNAME}
      - POSTGRES_DB=${DATABASE_NAME}
    # In standard dockerfile of postgres there is special instruction that assigns a volume to /var/lib/postgresql/data
    # I want to get fresh database every time I restart it.
    tmpfs:
      - /var/lib/postgresql/data
    ports:
      - ${DATABASE_PORT_EXPOSED_TO_DEV_LOCALHOST}:${DATABASE_PORT}
    networks:
      back-db-net-dev:
      pgadmin-db-net-dev:
      vscode-db-net-dev:
      pgcli-db-net-dev:
      apache_superset_network:

  postgres-admin-dev:
    image: dpage/pgadmin4:latest
    restart: unless-stopped
    depends_on:
      - postgres-dev
    profiles:
      - use_pg_admin_tool
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    networks:
      nginx-pgadmin-net-dev:
        ipv4_address: 10.5.0.3
      pgadmin-db-net-dev:

  pgcli-dev:
    image: daxart/pgcli:latest
    profiles:
      - use_pgcli
    command:
      - postgres://${DATABASE_USERNAME}:${DATABASE_PASSWORD}@postgres-dev/${DATABASE_NAME}
    networks:
      pgcli-db-net-dev:


networks:
  nginx-front-net-dev: {}
  nginx-back-net-dev: {}
  nginx-pgadmin-net-dev:
    driver: bridge
    ipam:
      config:
        - subnet: 10.5.0.0/16
          gateway: 10.5.0.1
  apache_superset_network:
    external: true

  back-db-net-dev: {}
  pgadmin-db-net-dev: {}
  pgcli-db-net-dev: {}

  vscode-back-net-dev: {}
  vscode-db-net-dev: {}
  vscode-front-net-dev: {}
